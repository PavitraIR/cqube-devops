server {

        gzip on;
        gzip_types      application/javascript text/css;
        gzip_min_length 1000;
        gzip_static on;
        root /usr/share/nginx/html;
        server_tokens off;
        index index.html index.htm index.nginx-debian.html;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css";
        add_header Referrer-Policy "strict-origin";
        add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()";

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        #proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Accept-Encoding "";        

        server_name {{ api_endpoint }};

        location /dashboard {
                proxy_pass http://{{ local_ipv4_address }}:4200;
                #client_max_body_size 2G;
                #try_files $uri $uri/ =404;
        }
        location /admin {
                proxy_pass http://{{ local_ipv4_address }}:4201;
                #client_max_body_size 2G;
                #try_files $uri $uri/ =404;
        }
        location /api {
                proxy_pass http://{{ local_ipv4_address }}:8000;
                client_max_body_size 10G;
                #try_files $uri $uri/ =404;
        }
        location /grafana {
                proxy_pass http://{{ local_ipv4_address }}:3005;
                proxy_set_header Host $http_host;
                proxy_http_version 1.1;
                #try_files $uri $uri/ =404;
        }
        location /auth {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_pass http://{{ local_ipv4_address }}:8080$request_uri;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header Accept-Encoding "";
        }
        location / {
                proxy_pass http://{{ local_ipv4_address }}:9000;
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 300;
                # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                chunked_transfer_encoding off;
        }
        location /minio/ui/ {
                rewrite ^/minio/ui/(.*) /$1 break;
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-NginX-Proxy true;
                # This is necessary to pass the correct IP to be hashed
                real_ip_header X-Real-IP;
                proxy_connect_timeout 300;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                chunked_transfer_encoding off;
                proxy_pass http://{{ local_ipv4_address }}:9001;
   }

      listen [::]:443 ssl ipv6only=on;
      listen 443 ssl;
      ssl_certificate /etc/ssl_certificates/{{ nginx_cert_file }};
      ssl_certificate_key /etc/ssl_certificates/{{ nginx_key_file }};
}

server {
    if ($host = {{ api_endpoint }}) {
        return 301 https://$host$request_uri;
    }


        listen       80;
        listen  [::]:80;        

        server_name {{ api_endpoint }};
    return 404;


}
